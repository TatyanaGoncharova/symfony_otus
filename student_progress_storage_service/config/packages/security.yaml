security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    encoders:
        App\Entity\User:
            algorithm: auto
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: login
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        token:
            pattern: ^/api/v1/get-token
            security: false
        main:
            security: false
            stateless: true
            guard:
                authenticators:
                    - App\Security\JwtTokenAuthenticator


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/v1/get-progress, roles: [ ROLE_STUDENT] , methods: [ GET ] }
        - { path: ^/api/v1/get-task, roles: [ ROLE_STUDENT], methods: [ GET ] }
        - { path: ^/api/v1/get-lesson, roles: ROLE_STUDENT, methods: [ GET ] }
        - { path: ^/api/v1/update-progress, roles: [ ROLE_TEACHER ] , methods: [ PATCH ] }
        - { path: ^/api/v1/update-task, roles: [ ROLE_TEACHER ], methods: [ PATCH ] }
        - { path: ^/api/v1/update-lesson, roles: ROLE_TEACHER, methods: [ PATCH ] }
        - { path: ^/api/v1/update-unit, roles: ROLE_TEACHER, methods: [ PATCH ] }
        - { path: ^/api/v1/add-unit, roles: ROLE_TEACHER, methods: [ POST ] }
        - { path: ^/api/v1/delete-unit, roles: ROLE_TEACHER, methods: [ DELETE ] }
        - { path: ^/api/v1/get-unit, roles: ROLE_TEACHER, methods: [ GET ] }
        - { path: ^/api/v1/delete-user, roles: ROLE_ADMIN, methods: [ DELETE ] }
        - { path: ^/api/v1/delete-course, roles: ROLE_ADMIN, methods: [ DELETE ] }
        - { path: ^/api/v1/delete-skill, roles: ROLE_ADMIN, methods: [ DELETE ] }
        - { path: ^/api/v1/, roles: ROLE_MANAGER, methods: [ GET, POST, DELETE, PATCH ] }
        # - { path: ^/admin, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_MANAGER }

    role_hierarchy:
        ROLE_MANAGER: ROLE_STUDENT, ROLE_TEACHER
        ROLE_ADMIN: ROLE_MANAGER
        ROLE_TEACHER: ROLE_STUDENT
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
